<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAE
        AAAAAAAAAAAAAAABAAAAAQAAAAAAAAsLBAAbGxQAKysoAENBPgBMSUMAVU9HAFZWWQBfXlwAZWVlAGNl
        bQBvbWkAbm5tAHVrYQBzbWMAeG9jAHhwZAB9dWgAdHR0AHx8eQCNUjYAklY6AJRYPACVXT8AmF9BAJlg
        QgCdZEUAoGhIAKRuTQClcE8Ap3JRAKhzUgCpdFMAq3dWAKx5WACvfFsAsH5cAIB3awCCeW0AhXxvAIR7
        cQCFfXIAsYBeAImAcwCKgXQAjoV3AIuEeACOhnoAjol8AJCHeQCSiXsAlIp9AJaMfgCdiXkAs4RhALaF
        ZAC6jGkAu45sAL+TcwDCl3YAyKF+AIKDhACEhIQAiYqLAJaNgQCZkIEAmZCGAJyShACdlYcAnZWIAJ2Y
        jwCampoAoJaIAKGZigCimowApJyOAKOdkwClnZAAqaGSAKmhlgCrpJUAraWWAK2mmACuqJkAr6icALCo
        mACxqp0AtKucALOungC1rZ4Ao6OiAKSmpgCvqaAAp6eoAKepqQCoqKgArK6sALKtogC2rqAAtrChALey
        pgC4saIAubOkALq0pAC8taYAvbinALaxqAC6tKoAvbaoALq0rAC+uKoAvritALS0tAC7vbUAvby6AM+q
        iQDRrosA1LGNANSzkADWtZIA2bmXANm6mADbvJoA3b+dAMG5qQDCvK0AwLuwAMS/swDCvbYAw7+4AN3A
        ngDGwa8A38OgAN/FogDEwLEAx8SzAMrCsgDKxbYAzMe3AMfDvADKx78Azsq5AMzJvgDRyrkA0Mu9ANHN
        vADVzr0A1tC+AO7bvADv3b4A8N6/AMHCwwDNycIAy8vLAMzLzADMzMwA0c7BANHOxADX0cAA09DGANXR
        xgDZ0sEA2tTDANzVwgDY1MQA3dbEANbTyQDe2ckA3trNANPT0wDf3NQA19jYAN7e3gDg2ccA4drJAOPd
        ywDy4sMA9efJAOXg0gDl4tYA5eLYAOTj3gDr5dkA6ebeAPjs0AD88tYA/vbbAOHi4gDp5+AA6+nhAO7r
        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
        1ADu59cA7OfaAO/q3QD78dUA/vbbAOHh4ADq6uoA8fHxAPv7+wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAALCwAAAAAAAAAAAAAAAAALLS0MAAAeExMTExMTExMT
        Cz0sDQgIHhQUFBQUFBQUFAw8Kw8UCB4bGwgIGxsbGxsONyoQGwgeIyMhBiMjIyMjEDYpEiMIHiUlPwMl
        JSUlJRUuJxIlCBQRESEDCAgICAgSLigSCAgmJRwYGB0cGxkYDwsLDxgYJjk7Ojk4NTIxMAczIRYXGAAl
        JCIeHRwbGRcEQC8vFgAAAAAABAoAAAAHLwk/Pi8WAAAAAAAKAgEBBzQ0Cf8/FgAAAAAAAAAAABo/FgAf
        /xYAAAAAAAAAAAAAIAAAFh8AAAAAAAAAAAAAAAAAFh8AAP/nAAD/wwAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACAAQAA84AAAPgAAAD/iAAA/9kAAP/zAAA=
</value>
  </data>
</root>